<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 码农Joseph</title>
    <link>https://zhangxuesong.github.io/tags/go/</link>
    <description>Recent content in Go on 码农Joseph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 码农Joseph 和出处链接。</copyright>
    <lastBuildDate>Wed, 23 Dec 2020 15:58:04 +0800</lastBuildDate><atom:link href="https://zhangxuesong.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sync.Mutex与sync.RWMutex</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_sync_mutex/</link>
      <pubDate>Wed, 23 Dec 2020 15:58:04 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_sync_mutex/</guid>
      <description>静态条件、临界区和同步工具 相比于 Go 语言宣扬的 用通讯的方式共享数据，通过共享数据的方式来传递信息和协调线程运行的做法其实更加主流，毕竟大多数的</description>
    </item>
    
    <item>
      <title>更多的测试手法</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_test3/</link>
      <pubDate>Tue, 22 Dec 2020 17:04:57 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_test3/</guid>
      <description>-cpu 的功能 go test 命令的标记 -cpu，它是用来设置测试执行最大 P 数量的列表的。 这里的 P 是 processor 的缩写，每个 processor 都是一个可以承载若干个 G，且能够使这些 G 适</description>
    </item>
    
    <item>
      <title>测试的基本规则和流程 2</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_test2/</link>
      <pubDate>Tue, 22 Dec 2020 15:39:09 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_test2/</guid>
      <description>怎样解释功能测试的结果 go test gocore/gotest ok gocore/gotest 0.204s 第一行是输入的命令，表示对 gocore/gotest 代码包进行测试。下面一行是此次测试的简要结果，共有三块内容，首先是本次测试结果</description>
    </item>
    
    <item>
      <title>测试的基本规则和流程</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_test/</link>
      <pubDate>Tue, 22 Dec 2020 09:50:10 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_test/</guid>
      <description>Go 程序测试基础知识 单元测试，又称程序员测试。顾名思义，就是程序员们本该做的自我检查工作之一。 Go 语言的缔造者们从一开始就非常重视程序测试，并且</description>
    </item>
    
    <item>
      <title>Go 异常处理 2</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_panic2/</link>
      <pubDate>Mon, 21 Dec 2020 16:22:57 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_panic2/</guid>
      <description>怎样让 panic 包含一个值，应该让它包含什么值 在调用 panic 函数时，把某个值作为参数传给该函数就可以了。由于 panic 函数的唯一一个参数是空接口类型的，从语法上讲</description>
    </item>
    
    <item>
      <title>Go 异常处理</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_panic/</link>
      <pubDate>Sun, 20 Dec 2020 09:06:46 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_panic/</guid>
      <description>运行时恐慌 panic 这种程序异常叫做 panic，我们把它翻译成运行时恐慌。其中恐慌是由 panic 直译过来的，之所以加上运行时是因为这种异常只会在程序运行时的</description>
    </item>
    
    <item>
      <title>Go 语言错误处理 2</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_errors2/</link>
      <pubDate>Fri, 18 Dec 2020 15:24:34 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_errors2/</guid>
      <description>怎么根据实际情况给出恰当的错误值 构建错误值体系的基本方式有两种，即：创建立体的错误类型体系和创建扁平的错误值列表。 错误类型体系 由于在 Go 语言中</description>
    </item>
    
    <item>
      <title>Go 语言错误处理</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_errors/</link>
      <pubDate>Fri, 18 Dec 2020 14:12:32 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_errors/</guid>
      <description>error 类型是一个接口类型，也是一个 Go 语言的内建类型。在这个接口类型的声明中只包含了一个方法 Error。它不接受任何参数，但是返回一个 string 类型的结果</description>
    </item>
    
    <item>
      <title>Go 语言流程控制语句</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_control/</link>
      <pubDate>Fri, 18 Dec 2020 09:33:24 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_control/</guid>
      <description>for 语句 带 range 的 for 有哪些细节 range 左边的变量只有一个时代表索引值，有两个时，一个索引值，一个元素值。 数组的 range 不会修改原值，切片的 range 会影响底层数组。 numbers</description>
    </item>
    
    <item>
      <title>Go 语言及其执行规则 2</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_goroutine2/</link>
      <pubDate>Thu, 17 Dec 2020 16:59:29 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_goroutine2/</guid>
      <description>怎样让主 goroutine 等待其他 goroutine 一旦主 goroutine 执行完毕，当前的 Go 程序就会结束运行，无论其他的 goroutine 是否已经在运行了。很多时候我们需要等待其他的 goroutine 的执行结果才让主 goroutine</description>
    </item>
    
  </channel>
</rss>
