<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 码农Joseph</title>
    <link>https://zhangxuesong.github.io/tags/go/</link>
    <description>Recent content in Go on 码农Joseph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 码农Joseph 和出处链接。</copyright>
    <lastBuildDate>Sun, 20 Dec 2020 09:06:46 +0800</lastBuildDate><atom:link href="https://zhangxuesong.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 异常处理</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_panic/</link>
      <pubDate>Sun, 20 Dec 2020 09:06:46 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_panic/</guid>
      <description>运行时恐慌 panic 这种程序异常叫做 panic，我们把它翻译成运行时恐慌。其中恐慌是由 panic 直译过来的，之所以加上运行时是因为这种异常只会在程序运行时的</description>
    </item>
    
    <item>
      <title>Go 语言错误处理 2</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_errors2/</link>
      <pubDate>Fri, 18 Dec 2020 15:24:34 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_errors2/</guid>
      <description>怎么根据实际情况给出恰当的错误值 构建错误值体系的基本方式有两种，即：创建立体的错误类型体系和创建扁平的错误值列表。 错误类型体系 由于在 Go 语言中</description>
    </item>
    
    <item>
      <title>Go 语言错误处理</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_errors/</link>
      <pubDate>Fri, 18 Dec 2020 14:12:32 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_errors/</guid>
      <description>error 类型是一个接口类型，也是一个 Go 语言的内建类型。在这个接口类型的声明中只包含了一个方法 Error。它不接受任何参数，但是返回一个 string 类型的结果</description>
    </item>
    
    <item>
      <title>Go 语言流程控制语句</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_control/</link>
      <pubDate>Fri, 18 Dec 2020 09:33:24 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_control/</guid>
      <description>for 语句 带 range 的 for 有哪些细节 range 左边的变量只有一个时代表索引值，有两个时，一个索引值，一个元素值。 数组的 range 不会修改原值，切片的 range 会影响底层数组。 numbers</description>
    </item>
    
    <item>
      <title>Go 语言及其执行规则 2</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_goroutine2/</link>
      <pubDate>Thu, 17 Dec 2020 16:59:29 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_goroutine2/</guid>
      <description>怎样让主 goroutine 等待其他 goroutine 一旦主 goroutine 执行完毕，当前的 Go 程序就会结束运行，无论其他的 goroutine 是否已经在运行了。很多时候我们需要等待其他的 goroutine 的执行结果才让主 goroutine</description>
    </item>
    
    <item>
      <title>Go 语言及其执行规则</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_goroutine/</link>
      <pubDate>Thu, 17 Dec 2020 15:32:58 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_goroutine/</guid>
      <description>Don’t communicate by sharing memory; share memory by communicating. 从 Go 语言编程的角度解释，这句话的意思是：不要通过共享数据来通讯，要以通讯的方式来共享数据。 通道（channel）类</description>
    </item>
    
    <item>
      <title>指针的有限操作</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_pointer/</link>
      <pubDate>Thu, 17 Dec 2020 09:06:50 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_pointer/</guid>
      <description>先来看一段代码： type Dog struct { name string } func (dog *Dog) SetName(name string) { dog.name = name } 对于基本类型 Dog 来说，*Dog 就是它的指针类型。而对于一个 Dog 类型，值不为 nil 的变量 dog，取址</description>
    </item>
    
    <item>
      <title>接口类型的合理运用</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_interface/</link>
      <pubDate>Wed, 16 Dec 2020 16:14:01 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_interface/</guid>
      <description>接口的基础知识 接口类型与其他数据类型不同，它是没办法初始化的。具体的说，我们不能通过 new 或者 make 函数创建出一个接口类型的值，也无法用字面量来表示</description>
    </item>
    
    <item>
      <title>结构体及其方法</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_struct/</link>
      <pubDate>Wed, 16 Dec 2020 09:10:06 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_struct/</guid>
      <description>结构体类型基础知识 结构体表示的是实实在在的数据结构。一个结构体类型可以包含若干个字段，每个字段通常都需要有确切的名字和类型。 结构体也可以不包</description>
    </item>
    
    <item>
      <title>函数的正确使用姿势</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_func/</link>
      <pubDate>Tue, 15 Dec 2020 10:08:40 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_func/</guid>
      <description>函数是一等公民 在 Go 语言中，函数可是一等的（first-class）公民，函数类型也是一等的数据类型。 简单来说，这意味着函数不但可以用于封装代</description>
    </item>
    
  </channel>
</rss>
