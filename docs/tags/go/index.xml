<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 码农Joseph</title>
    <link>https://zhangxuesong.github.io/tags/go/</link>
    <description>Recent content in Go on 码农Joseph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 码农Joseph 和出处链接。</copyright>
    <lastBuildDate>Mon, 28 Dec 2020 18:20:06 +0800</lastBuildDate><atom:link href="https://zhangxuesong.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>临时对象池 sync.Pool</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_sync_pool/</link>
      <pubDate>Mon, 28 Dec 2020 18:20:06 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_sync_pool/</guid>
      <description>sync.Pool 类型可以被称为临时对象池，它的值可以被用来存储临时的对象。与 Go 语言的很多同步工具一样，sync.Pool 也属于结构体类型，它的值在真正被使</description>
    </item>
    
    <item>
      <title>context.Context 类型</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_context/</link>
      <pubDate>Mon, 28 Dec 2020 13:20:44 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_context/</guid>
      <description>怎样使用 context 包 package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;sync/atomic&amp;#34; &amp;#34;time&amp;#34; ) func main() { total := 12 var num int32 fmt.Printf(&amp;#34;The number: %d [with context.Context]\n&amp;#34;, num) cxt, cancelFunc := context.WithCancel(context.Background()) for i := 1; i &amp;lt;= total; i++ { go addNum(&amp;amp;num, i, func() { if atomic.LoadInt32(&amp;amp;num) == int32(total) { cancelFunc() } }) } &amp;lt;-cxt.Done() fmt.Println(&amp;#34;End.&amp;#34;) } // addNum 用于原子地增加一</description>
    </item>
    
    <item>
      <title>sync.WaitGroup 和 sync.Once</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_sync_waitgroup/</link>
      <pubDate>Sat, 26 Dec 2020 18:54:51 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_sync_waitgroup/</guid>
      <description>sync 包的 WaitGroup 类型 主 goroutine 等待其他手动启动的 goroutine 时可以考虑 sync.WaitGroup 类型，它比通道更适合实现这种一对多的 goroutine 协作流程。 sync.WaitGroup 是开箱即用的，也是并发安全的。同时，它一旦</description>
    </item>
    
    <item>
      <title>原子操作 sync/atomic 2</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_sync_atomic2/</link>
      <pubDate>Fri, 25 Dec 2020 19:52:27 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_sync_atomic2/</guid>
      <description>比较并交换和比较有什么不同 比较并交换操作即 CAS 操作，是有条件的交换操作，只有在条件满足的情况下才会进行交换操作。 所谓的交换指的是，把新值赋给变</description>
    </item>
    
    <item>
      <title>原子操作 sync/atomic</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_sync_atomic/</link>
      <pubDate>Fri, 25 Dec 2020 12:28:41 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_sync_atomic/</guid>
      <description>原子性执行和原子操作 对于一个 Go 程序来说，Go 语言运行时系统中的调度器会恰当的安排其中所有的 goroutine 的运行。但是在同一时刻，只可能有少数的 G 真正处于</description>
    </item>
    
    <item>
      <title>条件变量 sync.Cond 2</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_sync_cond2/</link>
      <pubDate>Thu, 24 Dec 2020 15:04:15 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_sync_cond2/</guid>
      <description>条件变量的 Wait方法做了什么 条件变量的 Wait 方法主要做了四件事： 把调用它的 goroutine 加入到当前条件变量的通知队列中。 解锁当前条件变量基于的互斥锁。 让当</description>
    </item>
    
    <item>
      <title>条件变量 sync.Cond</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_sync_cond/</link>
      <pubDate>Thu, 24 Dec 2020 08:58:23 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_sync_cond/</guid>
      <description>条件变量与互斥锁 条件变量是基于互斥锁的，它必须有互斥锁的支撑才能发挥作用。 条件变量并不是被用来保护临界区和共享资源的，它是用于协调想要访问共</description>
    </item>
    
    <item>
      <title>sync.Mutex与sync.RWMutex</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_sync_mutex/</link>
      <pubDate>Wed, 23 Dec 2020 15:58:04 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_sync_mutex/</guid>
      <description>静态条件、临界区和同步工具 相比于 Go 语言宣扬的 用通讯的方式共享数据，通过共享数据的方式来传递信息和协调线程运行的做法其实更加主流，毕竟大多数的</description>
    </item>
    
    <item>
      <title>更多的测试手法</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_test3/</link>
      <pubDate>Tue, 22 Dec 2020 17:04:57 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_test3/</guid>
      <description>-cpu 的功能 go test 命令的标记 -cpu，它是用来设置测试执行最大 P 数量的列表的。 这里的 P 是 processor 的缩写，每个 processor 都是一个可以承载若干个 G，且能够使这些 G 适</description>
    </item>
    
    <item>
      <title>测试的基本规则和流程 2</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_test2/</link>
      <pubDate>Tue, 22 Dec 2020 15:39:09 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_test2/</guid>
      <description>怎样解释功能测试的结果 go test gocore/gotest ok gocore/gotest 0.204s 第一行是输入的命令，表示对 gocore/gotest 代码包进行测试。下面一行是此次测试的简要结果，共有三块内容，首先是本次测试结果</description>
    </item>
    
  </channel>
</rss>
