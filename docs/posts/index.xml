<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>文章列表 on 码农Joseph</title>
		<link>https://zhangxuesong.github.io/posts/</link>
		<description>Recent content in 文章列表 on 码农Joseph</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en</language>
		<copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 码农Joseph 和出处链接。</copyright>
		<lastBuildDate>Sat, 05 Dec 2020 11:10:05 +0800</lastBuildDate>
		<atom:link href="https://zhangxuesong.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Gopath和工作区</title>
			<link>https://zhangxuesong.github.io/posts/basic/gopath/</link>
			<pubDate>Sat, 05 Dec 2020 11:10:05 +0800</pubDate>
			
			<guid>https://zhangxuesong.github.io/posts/basic/gopath/</guid>
			<description>前言 我们都知道 Go 的环境安装需要配置三个环境变量，他们分别是： GPROOT：Go语言安装根目录的路径，也就是Go语言的安装路径。 GOBIN：G</description>
			<content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>我们都知道 <code>Go</code> 的环境安装需要配置三个环境变量，他们分别是：</p>
<ul>
<li>GPROOT：<code>Go</code>语言安装根目录的路径，也就是<code>Go</code>语言的安装路径。</li>
<li>GOBIN：<code>Go</code>程序生成的可执行文件（executable file）的路径。</li>
<li>GOPATH：指向工作区目录的路径，是我们自定义的工作空间，可定义多个。</li>
</ul>
<h1 id="设置-gopath-有什么意义">设置 <code>GOPATH</code> 有什么意义？</h1>
<p>之前只知道<code>GOPATH</code>是<code>Go</code>语言的工作目录，他的值是一个或者多个路径（不同系统分隔符不同），每个路径代表<code>Go</code>语言的一个工作区。</p>
<p>我们利用这些工作区去防止<code>Go</code>语言的源码文件（source file），已经安装后的归档文件（archive file）和可执行文件（executable file）。</p>
<p>事实上，由于<code>Go</code>语言项目在其生命周期内的所有操作（编码、依赖管理、构建、测试、安装等）基本上都是围绕<code>GOPATH</code>和工作区进行的。所以它的背后还有以下几个知识点，分别是：</p>
<h2 id="1go语言源码的组织方式">1、<code>Go</code>语言源码的组织方式</h2>
<p><code>Go</code>语言的源码是以代码包为基本单位的。在文件系统中，这些代码包和目录是一一对应的。由于目录可以有子目录，所以代码包也可以有子包。</p>
<p>一个代码包中可以包含任意个以<code>.go</code>为扩展名的源码文件，这些源码文件都需要被声明属于同一个代码包。</p>
<p>代码包的名称一般会与源码文件所在的目录同名。如果不同名，那么在构建、安装的过程中会以代码包名称为准。</p>
<p>每个代码包都有导入路径。代码包的导入路径是其他代码在使用该包中的程序实体时，需要引入的路径。在实际使用程序实体前，我们必须先导入其所在的代码包。具体方式就是<code>import</code>该包的导入路径。就像这样：</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">import</span> <span class="s">&#34;github.com/labstack/echo&#34;</span>
</code></pre></div><p>在工作区中，一个代码包的导入路径就是从<code>src</code>的子目录，到该包的实际存储位置的相对路径。</p>
<p>所以说，<code>Go</code>语言源码的组织方式就是以环境变量<code>GOPATH</code>、工作区、<code>src</code>目录和代码包为主线的。一般情况下，<code>Go</code>语言的源码文件都需要被存放在环境变量<code>GOPATH</code>包含的某个工作区（目录）中的<code>src</code>目录下的某个代码包（目录）中。</p>
<h2 id="2了解源码安装后的结果">2、了解源码安装后的结果</h2>
<p>源码文件通常放在工作区下的<code>src</code>子目录下；安装后如果产生了归档文件，就会放到该工作区的<code>pkg</code>子目录；如果产生了可以执行文件，就会放进该工作区的<code>bin</code>子目录下。</p>
<p>源码文件是以代码包的形式组织起来的，一个代码包其实就对应一个目录。安装某个代码包而产生的归档文件是与这个代码包同名的。</p>
<p>放置他的相对目录就是该包的导入路径的直接父级。比如，一个已存在的代码包的导入路径是：<code>github.com/labstack/echo</code>那么执行命令</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="k">go</span> <span class="nx">install</span> <span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">labstack</span><span class="o">/</span><span class="nx">echo</span>
</code></pre></div><p>生成的归档文件就是：<code>github.com/labstack</code>，文件名为<code>echo.a</code>。</p>
<p>上面这个代码包还有一层含义就是：该代码包的源码文件存放与<code>Github</code>上的<code>labstack</code>组的代码仓库<code>echo</code>中。</p>
<p>工作区通常会有<code>src</code>，<code>pkg</code>，<code>bin</code>，期中<code>src</code>存放源码文件，<code>pkg</code>存放归档文件，<code>bin</code>存放可执行文件</p>
<p><p class="md__image">
  <img src="../image/2fdfb5620e072d864907870e61ae5f3c.png"
    alt=""  />
</p>
</p>
<p>上图 <code>pkg</code> 下的 <code>平台相关目录</code> 在新版本已经被 <code>mod</code> 代替</p>
<p>源码文件分命令源码文件和库源码文件，有<code>main</code>入库的是命令源码文件，没有的是库源码文件，只能被命令源码文件引用</p>
<p>多工作区查找依赖包会根据<code>GOPATH</code>指定的工作区顺序查找，找到后就不再继续查找后面工作区</p>
<p>多工作区存在相同依赖包不会产生冲突，原因如上</p>
<p>编译时默认不编译依赖包，优先使用<code>pkg</code>中编译好的归档文件做静态链接</p>
]]></content>
		</item>
		
		<item>
			<title>My First Post</title>
			<link>https://zhangxuesong.github.io/posts/basic/my-first-post/</link>
			<pubDate>Fri, 04 Dec 2020 10:11:10 +0800</pubDate>
			
			<guid>https://zhangxuesong.github.io/posts/basic/my-first-post/</guid>
			<description>这是第一篇文章</description>
			<content type="html"><![CDATA[<p>这是第一篇文章</p>
]]></content>
		</item>
		
	</channel>
</rss>
