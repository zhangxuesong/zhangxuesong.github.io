<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>码农Joseph</title>
    <link>https://zhangxuesong.github.io/</link>
    <description>Recent content on 码农Joseph</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 码农Joseph 和出处链接。</copyright>
    <lastBuildDate>Wed, 09 Dec 2020 09:23:22 +0800</lastBuildDate><atom:link href="https://zhangxuesong.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 语言中的变量那些事儿</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_var/</link>
      <pubDate>Wed, 09 Dec 2020 09:23:22 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_var/</guid>
      <description>变量声明 除了 var name string 这种声明方式以外还有两种基于类型推断的声明方式。 注意短变量声明只能在函数体内部使用。 类型推断 类型推断是编程语言在编译器自动</description>
    </item>
    
    <item>
      <title>库源码文件和代码拆分</title>
      <link>https://zhangxuesong.github.io/posts/gocore/lib_source/</link>
      <pubDate>Tue, 08 Dec 2020 13:12:08 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/lib_source/</guid>
      <description>什么是库源码文件 库源码文件是不能直接运行的源码文件，它仅提供程序实体以供其他代码使用。如： package lib5 import &amp;#34;fmt&amp;#34; func Hello(name string) { fmt.Printf(&amp;#34;Hello %s!\n&amp;#34;, name) } 把上面代码保存到 libSource.go 执行 go run</description>
    </item>
    
    <item>
      <title>命令源码文件和 flag 库</title>
      <link>https://zhangxuesong.github.io/posts/gocore/command_source/</link>
      <pubDate>Mon, 07 Dec 2020 14:05:35 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/command_source/</guid>
      <description>前言 写了N年代码，只知道源码文件，原来细分的话源码文件也有区分，如： 命令源码文件 库源码文件 测试源码文件 他们也有不同的用途和规则。 命令源码文件</description>
    </item>
    
    <item>
      <title>go build和go get</title>
      <link>https://zhangxuesong.github.io/posts/gocore/go_build_get/</link>
      <pubDate>Sun, 06 Dec 2020 16:42:20 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/go_build_get/</guid>
      <description>go build go build运行的时候默认不会编译目标代码包所依赖的那些代码包。当被依赖的代码包的归档文件不存在或者源码文件有变化才会被编译。 使用命令g</description>
    </item>
    
    <item>
      <title>Gopath和工作区</title>
      <link>https://zhangxuesong.github.io/posts/gocore/gopath/</link>
      <pubDate>Sat, 05 Dec 2020 11:10:05 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/gopath/</guid>
      <description>前言 我们都知道 Go 的环境安装需要配置三个环境变量，他们分别是： GPROOT：Go语言安装根目录的路径，也就是Go语言的安装路径。 GOBIN：G</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://zhangxuesong.github.io/posts/gocore/my-first-post/</link>
      <pubDate>Fri, 04 Dec 2020 10:11:10 +0800</pubDate>
      
      <guid>https://zhangxuesong.github.io/posts/gocore/my-first-post/</guid>
      <description>这是第一篇文章</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://zhangxuesong.github.io/about/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhangxuesong.github.io/about/</guid>
      <description>你好，我是 Joseph，拥有多年后端开发经验，涉猎语言有PHP、Java、Go等。
保持学习，不断进取。
联系方式  Github：https://github.com/zhangxuesong 公众号：码农Joseph 邮箱：joseph2018@aliyun.com  </description>
    </item>
    
    <item>
      <title>《polarisxu Go 系列教程》</title>
      <link>https://zhangxuesong.github.io/go-categories/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhangxuesong.github.io/go-categories/</guid>
      <description>这里汇集 polarisxu 的原创和翻译文章。如果你有哪些想学的 Go 技术可以留言，我抽空写写。
 Echo 系列  基础篇1：搭建 Echo 开发环境  基础篇2：Echo 核心亮点介绍  基础篇3：通过一个例子串联各特性  定制篇0：让 Echo 更强大、好用  定制篇1：自定义 Binder，处理 Request 数据绑定  定制篇2：自定义 Validator，进行输入校验  定制篇3：自定义 Logger，用你喜欢的日志库  定制篇4：自定义 Renderer，增强或替换模板引擎  定制篇5：自定义 HTTP Error Handler，让 HTTP 错误处理更友好  定制篇6：自定义 Server 相关，替换或扩展默认的 Server  实战篇0：使用 Echo 开发一个博客系统     </description>
    </item>
    
    <item>
      <title>《polarisxu 开发工具教程》</title>
      <link>https://zhangxuesong.github.io/devtool-categories/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhangxuesong.github.io/devtool-categories/</guid>
      <description>关于编辑器&amp;amp;IDE相关的教程。
 玩转 VSCode 玩转 GoLand  基于 GoLand 使用 Docker 容器进行 Go 开发  在 GoLang 中使用 Docker Compose 运行 Go 应用程序  当 GoLand 遇到 Kubernetes：如何调试和运行 Go 程序  欢迎加入 GoLand 2020.1 抢先体验计划  还在用 2019.3 就 Out 了：GoLand 2020.1 版本正式发布  GoLand 2020.2 Beta 版发布：go.mod 升级以及对泛型的实验性支持     </description>
    </item>
    
  </channel>
</rss>
